// usePeer Result 구현
import React, { useState, useEffet, useContext } from 'react';
import Peer from 'peerjs';

/*
이상엽의 피드백

문제점 1. 설계한 대로 진행하지 않음.
우리가 개발하면서 각자 만든 부분을 합쳐 프로젝트를 완성하는데,
여기서 우리가 설계했던 것에서 벗어나게 개발을 할 경우,
합치는데 있어 문제가 발생할 가능성이 농후함.

각자 퍼즐을 만들어 합치는데, 혼자 끼워맞춰지지 않는 이상한 조각을 만든 샘.

만약 맡은 부분에 있어 수정이 필요할 경우 팀원들과 상의할 필요가 있음.

(의도대로 개발되지 않은 부분도 있고…)

문제점 2. PeerJS에 대한 이해도 부족
PeerJS의 경우 각자의 Peer로 연결하여 Data Connection 객체(보통 conn으로 쓰는)를 생성한 후,
Data Connection 객체를 통해 서로에게 정보를 발신, 수신하는 것이 일반적인 반면
여기 코드에서는 Peer로 정보를 주고받거나 이벤트 리스너를 추가하는 .on이 아닌 Peer끼리 연결할 때 사용하는 .connect를 사용하는 모습을 보여줌.

PeerJS에 관해 공식 문서를 보거나 연습을 더 할 필요가 있어 보임.


문제점 3. 문법에 어긋난 코딩
Notion에서 작성한 영향이 있긴 할 텐데, 코드 문법에 어긋난 코딩을 진행함.

제대로 닫히지 않은 괄호라던가 함수의 매개변수 선언 부분에 변수를 넣는 등 문법에 어긋난 코딩이 존재.

VSCode에서 작성한 후 복붙하면 낫긴 하겠지만, 코딩 자체를 많이 해서 익숙해지는게 개선방향.

3줄 요약
1. 기존 설계에서 무언가를 추가하거나 변경할 때에는 팀원과 상의하자
2. PeerJS에 대해 연습해보자
3. VSCode나 다른 편집기에서 작성, 코딩 자체에 보다 익숙해져 문법 실수를 줄이자

노 력 하 면 할 수 있 다 대 영 진!
*/


export function usePeer(page){
	const contextData = useContext(Context); // context 가져오기
	const [gameResult, setGameResult] = useState([]); // 결과 state
	const peer = contextData.current.Peer.PeerObject; // 자기 Peer 객체
	const conn = contextData.current.Peer.connectList; // connection 객체 리스트
	const users = contextData.HostData.UserList; // 유저리스트 변수 설정
	
	setGameResult(contextData.HostData.GameResult.rank); // 결과 업데이트
	
	//게스트에게 줄 함수
	function sendReturnToLobby(index){ // connectList의 인덱스 번호
		if(!users[index].isReturn){
			peer.send({ type : "disconnected", index }); //호스트에게 누가 연결 해제했는지 알림
			peer.on('disconnected', console('연결이 해제됨을 알림')); //게스트 연결 해제
		}
		else {
			users[index].userState = 'Lobby'; // 유저 상태 Lobby 로 변경
		}
	}

	//호스트 쪽 연결 해제 관리
	function isManagement(){
		peer.connect('data', (d) => {
		if (d.type === "disconnected") { 
			users.splice(d.index, 1); // 연결 해제한 User를 UserList에서 제거
			}
		}
	}
	// 호스트가 겜을 관둘 경우
	function Boom(users[0].isReturn){ // HOST 인덱스를 0으로 가정함
		 if(!users[0].isReturn){ // host가 겜을 관두기로 했는가?
			 conn.forEach(c => c.close()); 
			 peer.destroy();
		 }
		 else {
			 users[0].userState = 'Lobby'; // host 상태 Lobby 로 변경
		 }
	}
	
	switch( page ) {
		case 'Result':
			setEventListener();
			if(contextData.isHost)
				return { isManagement, Boom }; // iM = 연결 해제 관리, B = 호스트가 겜 관둠
			else
				return { gameResult, sendReturnToLobby }; // gR = 게임결과 ( state ), sRL = 로비로 보내기
	} 
}